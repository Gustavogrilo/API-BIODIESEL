# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '2b582c2e-511c-4fa8-827d-ccffdf827cf9'
  imageRepository: 'biodieselapidev'
  containerRegistry: 'biosistemico.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'biosistemico8809-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: ado-discord-webhook@1
      inputs:
        channelId: '954376318923968532'
        webhookKey: 'wpHSyJT8zodsaEH0ZDvbUTnCTztlqi30BVTWNuhPkvpbBgXkdq_Hualb6ZWBujeZN4fV'
        name: 'BiodieselAPI'
        messageType: 'content'
        content: 'Pipe Rodando'
    - task: Docker@2
      displayName: Build an image
      inputs:
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        containerRegistry: $(dockerRegistryServiceConnection)
        arguments: '--build-arg NESTJS_PORT=$(NESTJS_PORT) --build-arg TYPEORM_CONNECTION=$(TYPEORM_CONNECTION) --build-arg TYPEORM_HOST=$(TYPEORM_HOST) --build-arg TYPEORM_PORT=$(TYPEORM_PORT)
 --build-arg TYPEORM_USERNAME=$(TYPEORM_USERNAME) --build-arg TYPEORM_PASSWORD=$(TYPEORM_PASSWORD) --build-arg TYPEORM_DATABASE=$(TYPEORM_DATABASE) --build-arg TYPEORM_ENTITIES=$(TYPEORM_ENTITIES) 
--build-arg TYPEORM_SYNCHRONIZE=$(TYPEORM_SYNCHRONIZE) --build-arg TYPEORM_LOGGING=$(TYPEORM_LOGGING) --build-arg URL_PRODUCAO=$(URL_PRODUCAO) --build-arg AZURE_APP_INSIGHTS_KEY=$(AZURE_APP_INSIGHTS_KEY)'
    - task: Docker@2
      displayName: push an image
      inputs:
        repository: '$(imageRepository)'
        containerRegistry: $(dockerRegistryServiceConnection)
        command: 'push'
    - upload: manifests
      artifact: manifests

    - upload: manifests
      artifact: manifests
    
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'BIODIESELAPI.ingress-basic'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.dev.yml
                $(Pipeline.Workspace)/manifests/service.dev.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)

    environment: 'BIODIESELAPI.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: ingress-basic

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.dev.yml
                $(Pipeline.Workspace)/manifests/service.dev.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
          - task: ado-discord-webhook@1
            inputs:
             channelId: '954376318923968532'
             webhookKey: 'wpHSyJT8zodsaEH0ZDvbUTnCTztlqi30BVTWNuhPkvpbBgXkdq_Hualb6ZWBujeZN4fV'
             name: 'BiodieselAPI'
             messageType: 'content'
             content: 'Pipe Finalizado'

          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ]
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
          
